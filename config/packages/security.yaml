security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

#    TODO
#    # Nécessaire pour le bon foncitonnement de l'encodage à l'aide de UserPasswordEncoderInterface
#    encoders:
#        App\Entity\User:
#            algorithm: bcrypt
    providers:
        users_in_memory: { memory: null }

#        TODO
#        userProvider:
#            entity:
#                class: App\Entity\User # Ajout de 4 fonctions dans l'Entity User pour le bon fonctionnement de l'encodage à l'aide de UserPasswordEncoderInterface
#                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

#            TODO
#            provider: userProvider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

#   TODO
#        form_login:
#            login_path: login # route définie pour la connexion
#            check_path: login # page de redirection si connexion nok
#            username_parameter: login[_email]
#            password_parameter: login[_password]
#
#        logout:
#            path: logout # route définie dans routes.yaml
#            target: homepage # page de redirection : page d'accueil

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }

#   TODO
#    access_control:
#        - { path: '^/admin', roles: ROLE_ADMIN }
#        - { path: '^/membre/covoiturage/tous-les-covoiturages', roles: ROLE_ADMIN }
#        - { path: '^/professeur', roles: ROLE_TEACHER }
#        - { path: '^/membre', roles: ROLE_USER }
#
#    role_hierarchy: # ROLE_ADMIN inclu ROLE_TEACHER qui inclu ROLE_USER
#        ROLE_ADMIN: ROLE_TEACHER
#        ROLE_TEACHER: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
